(ql:quickload :dexador)
(ql:quickload :plump)
(ql:quickload :clss)

(defun writeimg (filename img)
  (with-open-file (stream (make-pathname :name filename)
                          :direction :output
                          :element-type '(unsigned-byte 8)
                          :if-exists :append
                          :if-does-not-exist :create
                          )
    (format t "Now Writing ~A~%" filename)
    (dolist (target (coerce img 'list)) 
      (write-byte target stream))))

(defvar *baseurl* "http://gfkari.gamedbs.jp")
(defvar *detail* (concatenate 'string *baseurl* "/girl/detail/"))
(defvar *bodyurl* "")
(defvar *num* 0)
(defvar *count*)

(defun setNum(x)
  (setq *num* x))

(defun getHtml(s)
  (let ((html (dex:get s)))
    (let ((result (plump:parse html)))
      result)))

(defmacro msg()
  `(format t "Please input number for wish girls~%"))

(defmacro IntToString10(i)
  `(write-to-string ,i :base 10))

(defun setBodyurl()
  (setq *bodyurl*
        (gethtml
         (concatenate 'string *detail* (write-to-string *num* :base 10)))))

(defun getHref(l)
  (plump:attribute l "href"))

(defun getTitle(l)
  (plump:attribute l "title"))

(defun connectString(s1 s2)
  (concatenate 'string s1 s2))

(defun getMaincard()
   (let ((n (coerce (clss:select "a.cl" *bodyurl*) 'list)))
     (dolist (l n)
       (let ((result (getHref l)))
         (let ((title (getTitle l)))
           (let ((url (connectString *baseurl* result)))
             (let ((img (dex:get url)))
               (writeimg (connectString title ".jpg") img))))))))

(defun getPetitcard()
  (let ((n (coerce (clss:select "a" (clss:select "div.petitgirl-img" *bodyurl*)) 'list)))
    (let ((x 0))
    (dolist (l n)
       (let ((result (getHref l)))
           (let ((url (connectString *baseurl* result)))
             (let ((img (dex:get url)))
               (writeimg (connectString (IntToString10 x) ".png") img)
               (incf x))))))))

(defun getHitokoma()
  (let ((n (coerce (clss:select "a" (clss:select "div" *bodyurl*)) 'list)))
    (dolist (l n)
      (let ((check (plump:attribute l "data-lightbox")))
        (cond ((equal check "hitokoma")
               (let ((result (getHref l)))
                 (let ((title (getTitle l)))
                   (let ((url (connectString *baseurl* result)))
                     (let ((img (dex:get url)))
                       (writeimg (connectString title ".png") img)))))))))))

(defparameter *onpulist* (list ""))
(defun getOnpuCard()
  (setq *count* 0)
  (let ((n (coerce (clss:select "a" (clss:select "div" *bodyurl*)) 'list)))
    (dolist (l n)
      (let ((check (plump:attribute l "data-lightbox")))
        (cond ((equal check "gfmusic-card-set")
               (let ((result (getHref l)))
                 (let ((title (getTitle l)))
                   (cond ((= *count* 0)
                          (push title (cdr (last *onpulist*)))
                          (let ((url (connectString *baseurl* result)))
                            (let ((img (dex:get url)))
                              (writeimg (connectString title ".jpg") img)
                          (setq *count* 2))))
                         ((/= *count* 0)
                          (let ((dupcount 0))
                            (dolist (dupstr *onpulist*)
                              (if (equal dupstr title)
                                  (incf dupcount)))
                            (cond ((and (= dupcount 1) (= *count* 2))
                                   (push title (cdr (last *onpulist*)))
                                   (let ((url (connectString *baseurl* result)))
                                     (let ((img (dex:get url)))
                                       (writeimg (connectString title "2.jpg") img)
                                       (incf *count*))))
                                  ((and (= dupcount 0) (= *count* 3)) 
                                   (push title (cdr (last *onpulist*)))
                                   (let ((url (connectString *baseurl* result)))
                                     (let ((img (dex:get url)))
                                       (writeimg (connectString title ".jpg") img)
                                       (setq *count* 1))))
                                  ((= dupcount 0) 
                                   (push title (cdr (last *onpulist*)))
                                   (let ((url (connectString *baseurl* result)))
                                     (let ((img (dex:get url)))
                                       (writeimg (connectString title ".jpg") img)
                                       (incf *count*))))))))))))))))

(defun main()
 (msg)
  (setNum (read))
  (setBodyurl)
  (getOnpuCard)
  ;;(getHitokoma)
  ;;(getPetitcard)
  ;;(getMaincard)
  t)

(if (equal (main) t)
    (format t "~%Downloads Completed!~%"))
